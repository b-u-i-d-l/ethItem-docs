{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ethItem Repo in progress | Full release oct 28 Documentation The Ecosystem of ITEMS on top of ETHEREUM ETHITEM is a platform for building Items, a new class of objects on top of Ethereum. Fusing ERC20s, ERC721s and ERC1155s into a single super-standard, Items unleash the true power of art, games, dApps and DeFi. Use ITEMs EVERYWHERE ETHITEMS are portable across and interoperable with the entire Ethereum universe. Imagine buying potions for the next Raid in your favorite ETH-based game, or earning DAI by borrowing other in-game Items, or farming Cryptovoxel items, or... CREATE Create your own Item collections. Set owners (wallets and contracts able to mint Items) for each, and program extensions for every individual Item, making them truly portable. WRAP Wrap any ERC20, ERC721 or ERC1155 into an Item, empowering it with the qualities of all. Save gas Batch-Swapping ERC20s, farm and use ERC1155s in DeFi dApps, swap ERC721s on Uniswap\u2014a world of possibilities awaits you. DeFi NFTs DeFi lovers can finally swap NFTs and collectibles, farm any object, arbitrage them via DeFi dApps as well as NFT stores, and more\u2014at long last, the NFT and ERC20 ecosystems have been merged into one. EXPLORE Explore, swap, arbitrage, bid for and track prices of all existing ethItems. FARM Farm and setup farming contracts for your Items, with full DeFi integration. BUIDL Every Item is built with extendible contracts; you can undergird them with complex technology. This is the first general-purpose, interoperable and programmable token standard. With ethItem, you can call all existing Items via proxy contracts, without needing to hardcode every address. ITEM the Programmable Equity of the ETHITEM DFO ETHITEM protocol is built on top of a Decentralized Flexible Organization (DFO), ruled 100% on-chain\u2014without the need for any offchain intermediary\u2014by holders of its programmable equity, ARTE.","title":"Home"},{"location":"#ethitem","text":"","title":"ethItem"},{"location":"#repo-in-progress-full-release-oct-28","text":"Documentation","title":"Repo in progress | Full release oct 28"},{"location":"#the-ecosystem-of-items-on-top-of-ethereum","text":"ETHITEM is a platform for building Items, a new class of objects on top of Ethereum. Fusing ERC20s, ERC721s and ERC1155s into a single super-standard, Items unleash the true power of art, games, dApps and DeFi.","title":"The Ecosystem of ITEMS on top of ETHEREUM"},{"location":"#use-items-everywhere","text":"ETHITEMS are portable across and interoperable with the entire Ethereum universe. Imagine buying potions for the next Raid in your favorite ETH-based game, or earning DAI by borrowing other in-game Items, or farming Cryptovoxel items, or...","title":"Use ITEMs EVERYWHERE"},{"location":"#create","text":"Create your own Item collections. Set owners (wallets and contracts able to mint Items) for each, and program extensions for every individual Item, making them truly portable.","title":"CREATE"},{"location":"#wrap","text":"Wrap any ERC20, ERC721 or ERC1155 into an Item, empowering it with the qualities of all. Save gas Batch-Swapping ERC20s, farm and use ERC1155s in DeFi dApps, swap ERC721s on Uniswap\u2014a world of possibilities awaits you.","title":"WRAP"},{"location":"#defi-nfts","text":"DeFi lovers can finally swap NFTs and collectibles, farm any object, arbitrage them via DeFi dApps as well as NFT stores, and more\u2014at long last, the NFT and ERC20 ecosystems have been merged into one. EXPLORE Explore, swap, arbitrage, bid for and track prices of all existing ethItems.","title":"DeFi NFTs"},{"location":"#farm","text":"Farm and setup farming contracts for your Items, with full DeFi integration.","title":"FARM"},{"location":"#buidl","text":"Every Item is built with extendible contracts; you can undergird them with complex technology. This is the first general-purpose, interoperable and programmable token standard. With ethItem, you can call all existing Items via proxy contracts, without needing to hardcode every address.","title":"BUIDL"},{"location":"#item-the-programmable-equity-of-the-ethitem-dfo","text":"ETHITEM protocol is built on top of a Decentralized Flexible Organization (DFO), ruled 100% on-chain\u2014without the need for any offchain intermediary\u2014by holders of its programmable equity, ARTE.","title":"ITEM the Programmable Equity of the ETHITEM DFO"},{"location":"factory/IEthItemFactory/","text":"Contract IEthItemFactory Path: IEthItemFactory.sol Version: 1 Title: EthItemFactory Interface Description Methods doubleProxy() setDoubleProxy(address) Params ethItemERC20WrapperModel() setEthItemERC20WrapperModel(address) Params erc1155Model() setERC1155Model(address) Params erc1155WrapperModel() setERC1155WrapperModel(address) Params erc20WrapperModel() setERC20WrapperModel(address) Params erc721WrapperModel() setERC721WrapperModel(address) mintFeePercentage() setMintFeePercentage(uint256, uint256) Params calculateMintFee(uint256) Params burnFeePercentage() setBurnFeePercentage(uint256, uint256) Params calculateBurnFee(uint256) Params createERC1155(bytes calldata) Params createWrappedERC1155(bytes calldata) Params createWrappedERC20(bytes calldata) Params createWrappedERC721(bytes calldata) Params Description This contract represents the Factory Used to deploy all the EthItems, keeping track of them. Methods doubleProxy() GET - The DoubleProxy of the DFO linked to this Contract. setDoubleProxy(address) SET - The DoubleProxy of the DFO linked to this Contract. It can be done only by the Factory controller Params newDoubleProxy : the new DoubleProxy address ethItemERC20WrapperModel() GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information). setEthItemERC20WrapperModel(address) SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information). It can be done only by the Factory controller Params ethItemERC20WrapperModelAddress : the ethItemERC20WrapperModelAddress to set erc1155Model() GET - The address of the Smart Contract whose code will serve as a model for all the ERC1155 NFT-Based EthItems. Every EthItem will have its own address, but the code will be cloned from this one. setERC1155Model(address) SET - The address of the ERC1155 NFT-Based EthItem model. It can be done only by the Factory controller. Params erc1155ModelAddress : Address of the ERC1155 NFT-Based EthItem model to set erc1155WrapperModel() GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems. Every EthItem will have its own address, but the code will be cloned from this one. setERC1155WrapperModel(address) SET - The address of the ERC1155 NFT-Based EthItem model. It can be done only by the Factory controller. Params erc1155WrapperModelAddress : Address of the ERC1155 NFT-Based EthItem model to set erc20WrapperModel() GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems. setERC20WrapperModel(address) SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems. Note: It can be done only by the Factory controller. Params erc20WrapperModelAddress : Address of the Contract whose code will serve as a model for all the Wrapped ERC20 EthItem erc721WrapperModel() GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems. setERC721WrapperModel(address) SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems. It can be done only by the Factory controller. mintFeePercentage() GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transferred to the DFO for every new Minted EthItem. setMintFeePercentage(uint256, uint256) SET - The element useful to calculate the Percentage fee. It can be done only by the Factory controller. Params mintFeePercentageNumerator : Numerator used to compute the Percentage fee. mintFeePercentageDenominator : Denominator used to compute the Percentage fee. calculateMintFee(uint256) Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount. Params erc20WrapperAmount : The amount of minted EthItem burnFeePercentage() GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transferred to the DFO for every Burned EthItem setBurnFeePercentage(uint256, uint256) SET - The element useful to calculate the Percentage fee. It can be done only by the Factory controller. Params burnFeePercentageNumerator : Numerator used to compute the Percentage fee. burnFeePercentageDenominator : Denominator used to compute the Percentage fee. calculateBurnFee(uint256) Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount. Params erc20WrapperAmount : The amount of minted EthItem createERC1155(bytes calldata) Business Logic to create a brand-new EthItem. It raises the NewERC1155Created event. Params modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to physically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure. createWrappedERC1155(bytes calldata) Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem. It raises the NewWrappedERC1155Created event. Params modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to phisically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure. createWrappedERC20(bytes calldata) Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem. It raises the NewWrappedERC20Created event. Params modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to physically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure. createWrappedERC721(bytes calldata) Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem. It raises the 'NewWrappedERC721Created' event. Params modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure.","title":"IEthItemFactory"},{"location":"factory/IEthItemFactory/#contract-iethitemfactory","text":"Path: IEthItemFactory.sol Version: 1 Title: EthItemFactory Interface Description Methods doubleProxy() setDoubleProxy(address) Params ethItemERC20WrapperModel() setEthItemERC20WrapperModel(address) Params erc1155Model() setERC1155Model(address) Params erc1155WrapperModel() setERC1155WrapperModel(address) Params erc20WrapperModel() setERC20WrapperModel(address) Params erc721WrapperModel() setERC721WrapperModel(address) mintFeePercentage() setMintFeePercentage(uint256, uint256) Params calculateMintFee(uint256) Params burnFeePercentage() setBurnFeePercentage(uint256, uint256) Params calculateBurnFee(uint256) Params createERC1155(bytes calldata) Params createWrappedERC1155(bytes calldata) Params createWrappedERC20(bytes calldata) Params createWrappedERC721(bytes calldata) Params","title":"Contract IEthItemFactory"},{"location":"factory/IEthItemFactory/#description","text":"This contract represents the Factory Used to deploy all the EthItems, keeping track of them.","title":"Description"},{"location":"factory/IEthItemFactory/#methods","text":"","title":"Methods"},{"location":"factory/IEthItemFactory/#doubleproxy","text":"GET - The DoubleProxy of the DFO linked to this Contract.","title":"doubleProxy()"},{"location":"factory/IEthItemFactory/#setdoubleproxyaddress","text":"SET - The DoubleProxy of the DFO linked to this Contract. It can be done only by the Factory controller","title":"setDoubleProxy(address)"},{"location":"factory/IEthItemFactory/#params","text":"newDoubleProxy : the new DoubleProxy address","title":"Params"},{"location":"factory/IEthItemFactory/#ethitemerc20wrappermodel","text":"GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).","title":"ethItemERC20WrapperModel()"},{"location":"factory/IEthItemFactory/#setethitemerc20wrappermodeladdress","text":"SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information). It can be done only by the Factory controller","title":"setEthItemERC20WrapperModel(address)"},{"location":"factory/IEthItemFactory/#params_1","text":"ethItemERC20WrapperModelAddress : the ethItemERC20WrapperModelAddress to set","title":"Params"},{"location":"factory/IEthItemFactory/#erc1155model","text":"GET - The address of the Smart Contract whose code will serve as a model for all the ERC1155 NFT-Based EthItems. Every EthItem will have its own address, but the code will be cloned from this one.","title":"erc1155Model()"},{"location":"factory/IEthItemFactory/#seterc1155modeladdress","text":"SET - The address of the ERC1155 NFT-Based EthItem model. It can be done only by the Factory controller.","title":"setERC1155Model(address)"},{"location":"factory/IEthItemFactory/#params_2","text":"erc1155ModelAddress : Address of the ERC1155 NFT-Based EthItem model to set","title":"Params"},{"location":"factory/IEthItemFactory/#erc1155wrappermodel","text":"GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems. Every EthItem will have its own address, but the code will be cloned from this one.","title":"erc1155WrapperModel()"},{"location":"factory/IEthItemFactory/#seterc1155wrappermodeladdress","text":"SET - The address of the ERC1155 NFT-Based EthItem model. It can be done only by the Factory controller.","title":"setERC1155WrapperModel(address)"},{"location":"factory/IEthItemFactory/#params_3","text":"erc1155WrapperModelAddress : Address of the ERC1155 NFT-Based EthItem model to set","title":"Params"},{"location":"factory/IEthItemFactory/#erc20wrappermodel","text":"GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.","title":"erc20WrapperModel()"},{"location":"factory/IEthItemFactory/#seterc20wrappermodeladdress","text":"SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems. Note: It can be done only by the Factory controller.","title":"setERC20WrapperModel(address)"},{"location":"factory/IEthItemFactory/#params_4","text":"erc20WrapperModelAddress : Address of the Contract whose code will serve as a model for all the Wrapped ERC20 EthItem","title":"Params"},{"location":"factory/IEthItemFactory/#erc721wrappermodel","text":"GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.","title":"erc721WrapperModel()"},{"location":"factory/IEthItemFactory/#seterc721wrappermodeladdress","text":"SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems. It can be done only by the Factory controller.","title":"setERC721WrapperModel(address)"},{"location":"factory/IEthItemFactory/#mintfeepercentage","text":"GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transferred to the DFO for every new Minted EthItem.","title":"mintFeePercentage()"},{"location":"factory/IEthItemFactory/#setmintfeepercentageuint256-uint256","text":"SET - The element useful to calculate the Percentage fee. It can be done only by the Factory controller.","title":"setMintFeePercentage(uint256, uint256)"},{"location":"factory/IEthItemFactory/#params_5","text":"mintFeePercentageNumerator : Numerator used to compute the Percentage fee. mintFeePercentageDenominator : Denominator used to compute the Percentage fee.","title":"Params"},{"location":"factory/IEthItemFactory/#calculatemintfeeuint256","text":"Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.","title":"calculateMintFee(uint256)"},{"location":"factory/IEthItemFactory/#params_6","text":"erc20WrapperAmount : The amount of minted EthItem","title":"Params"},{"location":"factory/IEthItemFactory/#burnfeepercentage","text":"GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transferred to the DFO for every Burned EthItem","title":"burnFeePercentage()"},{"location":"factory/IEthItemFactory/#setburnfeepercentageuint256-uint256","text":"SET - The element useful to calculate the Percentage fee. It can be done only by the Factory controller.","title":"setBurnFeePercentage(uint256, uint256)"},{"location":"factory/IEthItemFactory/#params_7","text":"burnFeePercentageNumerator : Numerator used to compute the Percentage fee. burnFeePercentageDenominator : Denominator used to compute the Percentage fee.","title":"Params"},{"location":"factory/IEthItemFactory/#calculateburnfeeuint256","text":"Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.","title":"calculateBurnFee(uint256)"},{"location":"factory/IEthItemFactory/#params_8","text":"erc20WrapperAmount : The amount of minted EthItem","title":"Params"},{"location":"factory/IEthItemFactory/#createerc1155bytes-calldata","text":"Business Logic to create a brand-new EthItem. It raises the NewERC1155Created event.","title":"createERC1155(bytes calldata)"},{"location":"factory/IEthItemFactory/#params_9","text":"modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to physically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.","title":"Params"},{"location":"factory/IEthItemFactory/#createwrappederc1155bytes-calldata","text":"Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem. It raises the NewWrappedERC1155Created event.","title":"createWrappedERC1155(bytes calldata)"},{"location":"factory/IEthItemFactory/#params_10","text":"modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to phisically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure.","title":"Params"},{"location":"factory/IEthItemFactory/#createwrappederc20bytes-calldata","text":"Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem. It raises the NewWrappedERC20Created event.","title":"createWrappedERC20(bytes calldata)"},{"location":"factory/IEthItemFactory/#params_11","text":"modelInitCallPayload : The ABI-encoded input parameters to be passed to the model to physically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure.","title":"Params"},{"location":"factory/IEthItemFactory/#createwrappederc721bytes-calldata","text":"Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem. It raises the 'NewWrappedERC721Created' event.","title":"createWrappedERC721(bytes calldata)"},{"location":"factory/IEthItemFactory/#params_12","text":"modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT. It changes according to the Model Version. ethItemAddress : The address of the new EthItem ethItemInitResponse : The ABI-encoded output response eventually received by the Model initialization procedure.","title":"Params"},{"location":"models/1/IERC1155V1/","text":"Contract IERC1155V1 Path: IERC1155V1.sol Version: 1 Title: EthItem token standard - Version 1 Description Methods init(string calldata, string calldata, address, bytes calldata) Params extension() canMint(address) Params releaseExtension() Description EthItem token standard - Version 1. Methods init(string calldata, string calldata, address, bytes calldata) Contract Initialization. Params name : the chosen name for this NFT symbol : the chosen symbol (Ticker) for this NFT extensionAddress : the optional address of the extension. It can be a Wallet or a SmartContract extensionInitPayload : the optional payload useful to call the extension within the new created EthItem extension() GET the extensionAddress , the address of the eventual EthItem main owner or the SmartContract which contains all the logics to directly exploit all the Collection Items of this EthItem. It can also be a simple wallet. canMint(address) GET the result. true if the given address is able to mint new tokens, false otherwise. Params operator : The address to know info about. releaseExtension() Method callable by the extension only and useful to release the control on the EthItem, which from now on will run independently.","title":"IERC1155V1"},{"location":"models/1/IERC1155V1/#contract-ierc1155v1","text":"Path: IERC1155V1.sol Version: 1 Title: EthItem token standard - Version 1 Description Methods init(string calldata, string calldata, address, bytes calldata) Params extension() canMint(address) Params releaseExtension()","title":"Contract IERC1155V1"},{"location":"models/1/IERC1155V1/#description","text":"EthItem token standard - Version 1.","title":"Description"},{"location":"models/1/IERC1155V1/#methods","text":"","title":"Methods"},{"location":"models/1/IERC1155V1/#initstring-calldata-string-calldata-address-bytes-calldata","text":"Contract Initialization.","title":"init(string calldata, string calldata, address, bytes calldata)"},{"location":"models/1/IERC1155V1/#params","text":"name : the chosen name for this NFT symbol : the chosen symbol (Ticker) for this NFT extensionAddress : the optional address of the extension. It can be a Wallet or a SmartContract extensionInitPayload : the optional payload useful to call the extension within the new created EthItem","title":"Params"},{"location":"models/1/IERC1155V1/#extension","text":"GET the extensionAddress , the address of the eventual EthItem main owner or the SmartContract which contains all the logics to directly exploit all the Collection Items of this EthItem. It can also be a simple wallet.","title":"extension()"},{"location":"models/1/IERC1155V1/#canmintaddress","text":"GET the result. true if the given address is able to mint new tokens, false otherwise.","title":"canMint(address)"},{"location":"models/1/IERC1155V1/#params_1","text":"operator : The address to know info about.","title":"Params"},{"location":"models/1/IERC1155V1/#releaseextension","text":"Method callable by the extension only and useful to release the control on the EthItem, which from now on will run independently.","title":"releaseExtension()"},{"location":"models/1/IERC1155WrapperV1/","text":"Contract IERC1155WrapperV1 Path: IERC1155WrapperV1.sol Version: 1 Title: ERC1155 NFT-Based EthItem, version 1 Description Methods init(address, string calldata, string calldata, bool, bool, bool) Params source() Description ERC1155 NFT-Based EthItem, version 1. Methods init(address, string calldata, string calldata, bool, bool, bool) Contract Initialization. Params name : The chosen name for this NFT symbol : The chosen symbol (Ticker) for this NFT source : The address of the Original ERC1155 NFT Wrapped in this collection supportsSpecificName : Set to true if the given source NFT supports the name(uint256) function. supportsSpecificSymbol : Set to true if the given source NFT supports the symbol(uint256) function. supportsSpecificDecimals : Set to true if the given source NFT supports the decimals(uint256) function. source() GET The address of the original wrapped ERC1155 NFT.","title":"IERC1155WrapperV1"},{"location":"models/1/IERC1155WrapperV1/#contract-ierc1155wrapperv1","text":"Path: IERC1155WrapperV1.sol Version: 1 Title: ERC1155 NFT-Based EthItem, version 1 Description Methods init(address, string calldata, string calldata, bool, bool, bool) Params source()","title":"Contract IERC1155WrapperV1"},{"location":"models/1/IERC1155WrapperV1/#description","text":"ERC1155 NFT-Based EthItem, version 1.","title":"Description"},{"location":"models/1/IERC1155WrapperV1/#methods","text":"","title":"Methods"},{"location":"models/1/IERC1155WrapperV1/#initaddress-string-calldata-string-calldata-bool-bool-bool","text":"Contract Initialization.","title":"init(address, string calldata, string calldata, bool, bool, bool)"},{"location":"models/1/IERC1155WrapperV1/#params","text":"name : The chosen name for this NFT symbol : The chosen symbol (Ticker) for this NFT source : The address of the Original ERC1155 NFT Wrapped in this collection supportsSpecificName : Set to true if the given source NFT supports the name(uint256) function. supportsSpecificSymbol : Set to true if the given source NFT supports the symbol(uint256) function. supportsSpecificDecimals : Set to true if the given source NFT supports the decimals(uint256) function.","title":"Params"},{"location":"models/1/IERC1155WrapperV1/#source","text":"GET The address of the original wrapped ERC1155 NFT.","title":"source()"},{"location":"models/1/IERC20WrapperV1/","text":"Contract IERC20WrapperV1 Path: IERC20WrapperV1.sol Version: 1 Title: ERC20-Based EthItem Description Methods source(uint256) Params object(address) Params mint(address) Params Returns Description All the wrapped ERC20 Tokens will be created following this Model. The minting operation can be done by calling the appropriate method given in this interface. The burning operation will send back the original wrapped ERC20 amount. To initialize it, the original init(address, string, string) function of the EthItem Token Standard will be used, but the first address parameter will be the original ERC20 Source Contract to Wrap, and NOT the ERC20Model, which is always taken by the Contract who creates the Wrapper. Methods source(uint256) GET - the wrapped ERC20 Token address corresponding to the given objectId Params objectId : Get the Object Id you want to know info about. object(address) GET the id in the collection which corresponds to the given erc20TokenAddress. Params erc20TokenAddress : the wrapped ERC20 Token address you want to know info about mint(address) Mint operation. It inhibits and bypasses the original EthItem Token Standard mint(uint256, string) . The logic will execute a transferFrom call to the given erc20TokenAddress to transfer the chosen amount of tokens Params erc20TokenAddress : The token address to wrap. amount : The token amount to wrap tokenUri : The uri containing all the Token's metadata, it can be blank if it is not the first time this token has been wrapped Returns objectId : the id given by this collection to the given erc20TokenAddress. It can be brand new if it is the first time this collection is created. Otherwise, the firstly-created objectId value will be used. wrappedTokenAddress : The address ethItemERC20Wrapper generated after the creation of the returned objectId","title":"IERC20WrapperV1"},{"location":"models/1/IERC20WrapperV1/#contract-ierc20wrapperv1","text":"Path: IERC20WrapperV1.sol Version: 1 Title: ERC20-Based EthItem Description Methods source(uint256) Params object(address) Params mint(address) Params Returns","title":"Contract IERC20WrapperV1"},{"location":"models/1/IERC20WrapperV1/#description","text":"All the wrapped ERC20 Tokens will be created following this Model. The minting operation can be done by calling the appropriate method given in this interface. The burning operation will send back the original wrapped ERC20 amount. To initialize it, the original init(address, string, string) function of the EthItem Token Standard will be used, but the first address parameter will be the original ERC20 Source Contract to Wrap, and NOT the ERC20Model, which is always taken by the Contract who creates the Wrapper.","title":"Description"},{"location":"models/1/IERC20WrapperV1/#methods","text":"","title":"Methods"},{"location":"models/1/IERC20WrapperV1/#sourceuint256","text":"GET - the wrapped ERC20 Token address corresponding to the given objectId","title":"source(uint256)"},{"location":"models/1/IERC20WrapperV1/#params","text":"objectId : Get the Object Id you want to know info about.","title":"Params"},{"location":"models/1/IERC20WrapperV1/#objectaddress","text":"GET the id in the collection which corresponds to the given erc20TokenAddress.","title":"object(address)"},{"location":"models/1/IERC20WrapperV1/#params_1","text":"erc20TokenAddress : the wrapped ERC20 Token address you want to know info about","title":"Params"},{"location":"models/1/IERC20WrapperV1/#mintaddress","text":"Mint operation. It inhibits and bypasses the original EthItem Token Standard mint(uint256, string) . The logic will execute a transferFrom call to the given erc20TokenAddress to transfer the chosen amount of tokens","title":"mint(address)"},{"location":"models/1/IERC20WrapperV1/#params_2","text":"erc20TokenAddress : The token address to wrap. amount : The token amount to wrap tokenUri : The uri containing all the Token's metadata, it can be blank if it is not the first time this token has been wrapped","title":"Params"},{"location":"models/1/IERC20WrapperV1/#returns","text":"objectId : the id given by this collection to the given erc20TokenAddress. It can be brand new if it is the first time this collection is created. Otherwise, the firstly-created objectId value will be used. wrappedTokenAddress : The address ethItemERC20Wrapper generated after the creation of the returned objectId","title":"Returns"},{"location":"models/1/IERC721WrapperV1/","text":"Contract IERC721WrapperV1 Path: IERC721WrapperV1.sol Version: 1 Title: ERC721 NFT-Based EthItem, version 1 Description Methods source() Description All the wrapped ERC721 NFTs will be created following this Model. The minting operation can be done only by transferring the original ERC721 Item through the classic safeTransferFrom call. The burning operation will send back the original wrapped NFT. To initialize it, the original 'init(address,string,string)' function of the EthItem Token Standard will be used, but the first address parameter will be the original ERC721 Source Contract to Wrap, and NOT the ERC20Model, which is always taken by the Contract who creates the Wrapper. As the entire amount of the contract is always 1, the owner of the object can be the Methods source() GET the address of the original wrapped ERC721 NFT","title":"IERC721WrapperV1"},{"location":"models/1/IERC721WrapperV1/#contract-ierc721wrapperv1","text":"Path: IERC721WrapperV1.sol Version: 1 Title: ERC721 NFT-Based EthItem, version 1 Description Methods source()","title":"Contract IERC721WrapperV1"},{"location":"models/1/IERC721WrapperV1/#description","text":"All the wrapped ERC721 NFTs will be created following this Model. The minting operation can be done only by transferring the original ERC721 Item through the classic safeTransferFrom call. The burning operation will send back the original wrapped NFT. To initialize it, the original 'init(address,string,string)' function of the EthItem Token Standard will be used, but the first address parameter will be the original ERC721 Source Contract to Wrap, and NOT the ERC20Model, which is always taken by the Contract who creates the Wrapper. As the entire amount of the contract is always 1, the owner of the object can be the","title":"Description"},{"location":"models/1/IERC721WrapperV1/#methods","text":"","title":"Methods"},{"location":"models/1/IERC721WrapperV1/#source","text":"GET the address of the original wrapped ERC721 NFT","title":"source()"},{"location":"models/1/IEthItemModelBased/","text":"Contract IEthItemModelBase Path: IEthItemModelBase.sol Version: 1 Title: EthItemModelBase Interface Description Methods init(string calldata, string calldata) Params modelVersion() factory() Description This interface contains the common data provided by all the EthItem models. Methods init(string calldata, string calldata) Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds Params name : The chosen name for this NFT symbol : The chosen symbol (Ticker) for this NFT modelVersion() GET - The modelVersionNumber of the Model, it should be progressive factory() GET - The factoryAddress of the Contract which initialized this EthItem","title":"IEthItemModelBased"},{"location":"models/1/IEthItemModelBased/#contract-iethitemmodelbase","text":"Path: IEthItemModelBase.sol Version: 1 Title: EthItemModelBase Interface Description Methods init(string calldata, string calldata) Params modelVersion() factory()","title":"Contract IEthItemModelBase"},{"location":"models/1/IEthItemModelBased/#description","text":"This interface contains the common data provided by all the EthItem models.","title":"Description"},{"location":"models/1/IEthItemModelBased/#methods","text":"","title":"Methods"},{"location":"models/1/IEthItemModelBased/#initstring-calldata-string-calldata","text":"Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds","title":"init(string calldata, string calldata)"},{"location":"models/1/IEthItemModelBased/#params","text":"name : The chosen name for this NFT symbol : The chosen symbol (Ticker) for this NFT","title":"Params"},{"location":"models/1/IEthItemModelBased/#modelversion","text":"GET - The modelVersionNumber of the Model, it should be progressive","title":"modelVersion()"},{"location":"models/1/IEthItemModelBased/#factory","text":"GET - The factoryAddress of the Contract which initialized this EthItem","title":"factory()"}]}